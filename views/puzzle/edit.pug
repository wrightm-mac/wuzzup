extends ../layout

include ../mixins/hidden
include ../mixins/puzzle/board
include ../mixins/puzzle/clues
include ../mixins/puzzle/tags

block content
  link(href='/css/puzzle.css', rel='stylesheet')
  script(src="/scripts/puzzle.js")

  h1  Edit Puzzle
  p
    | Edit the puzzle's title, description, board, and clues.

  h3(contenteditable, title='click to edit')#puzzle-title.puzzle-title= puzzle.name ||  "Puzzle"
  div(contenteditable, title='click to edit')#puzzle-description.puzzle-description= puzzle.description || "Description."

  +board('edit')

  +clues('editclues')

  +tags('edittags', puzzle.tags, true)

  section.puzzle-buttons
    div#savepuzzle.standard-button Save
    div#publishpuzzle.standard-button.standard-button-separator Publish
    div#deletepuzzle.standard-button Delete

  +hidden('puzzle-content', puzzle)

  script.
    $(function() {
      const $grid = $("table#edit");

      const $acrossList = $("section#editclues ul#across");
      const $downList = $("section#editclues ul#down");

      const $publishbutton = $("#publishpuzzle");
      const $deletebutton = $("#deletepuzzle");
      const $savebutton = $("#savepuzzle");

      let clues = {};

      $("section.puzzle-clues").on("blur", "div.puzzle-list-clue", function() {
        const $this = $(this);
        const id = $this.closest("li").attr("data-pos");
        clues[id] = $this.text();
        $savebutton.removeClass("standard-button-disabled");
      })

      function makeAnchorId(prefix, anchor) {
        return `${prefix}-${anchor.pos.column}-${anchor.pos.row}`;
      }

      function makeClueItem(anchor, prefix, word) {
        const id = makeAnchorId(prefix, anchor);
        const clue = word.clue || clues[id];
        if (clue) {
          clues[id] = clue;
        }

        const $item = $("<li>", {class: "puzzle-list-item"})
                      .attr("data-number", anchor.number)
                      .attr("data-column", anchor.pos.column)
                      .attr("data-row", anchor.pos.row)
                      .attr("data-pos", id)
                      .append($("<span>", {class: "puzzle-list-anchor"}).text(anchor.number))
                      .append($("<span>", {class: "puzzle-list-word"}).text(` [${word.text || ""}]`))
                      .append($("<span>", {class: "puzzle-list-size"}).text(` (${word.length})`))
                      .append($("<div>", {class: "puzzle-list-clue", title: "click to edit", contenteditable: true}).text(clue || `clue for '${word.text}'`));

        return $item;
      }

      function change(event) {
        $acrossList.empty();
        $downList.empty();

        $.each(event.anchors, function() {
            if (this.horizontal) {
              $acrossList.append(makeClueItem(this, "a", this.horizontal));
            }
            if (this.vertical) {
              $downList.append(makeClueItem(this, "d", this.vertical));
            }
        });

        $savebutton.removeClass("standard-button-disabled");
      }

      function anchorload(anchor) {
        if (anchor.horizontal) {
          $acrossList.append(makeClueItem(anchor, "a", anchor.horizontal));
        }
        if (anchor.vertical) {
          $downList.append(makeClueItem(anchor, "d", anchor.vertical));
        }
      }

      const puzzle = $.getHidden("puzzle-content") || {};
      const puzzleInfo = {
        hash: puzzle.hash
      };

      function loaded() {
        $savebutton.addClass("standard-button-disabled");
        if (puzzle.published) {
          $publishbutton.hide();
          $deletebutton.hide();
        }
      }

      const settings = {
        editing: true,
        events: {
          load: loaded,
          anchorload: anchorload,
          cell: change,
          letter: change
        }
      };

      $savebutton.click(function() {
        if (! $savebutton.hasClass("standard-button-disabled")) {
          let data = $grid.puzzle().contents(anchor => {
            if (anchor.horizontal) {
              const id = makeAnchorId("a", anchor);
              anchor.horizontal.clue = clues[id];
            }
            if (anchor.vertical) {
              const id = makeAnchorId("d", anchor);
              anchor.vertical.clue = clues[id];
            }
          });

          data = $.extend(data, puzzleInfo, {
            name: $("#puzzle-title").text(),
            description: $("#puzzle-description").text(),
            tags: $("#edittags").val().trim().split(/\s* \s*/)
          });

          console.log("save: data(%o)", data);

          $.ajax(
            {
              url: "/puzzle",
              method: puzzleInfo.hash ? "PUT" : "POST",
              data: data
            }
          ).
          then(function(response) {
            console.info("$.ajax: success(%o)", response);
            puzzleInfo.hash = response.hash;
            $savebutton.addClass("standard-button-disabled");
          })
          .catch(function(error) {
            console.error("$.ajax: error(%o)", error.responseJSON);
          });
        }
      });

      $grid.puzzle(puzzle,  settings)
        .end()
        .fadeIn();
    });