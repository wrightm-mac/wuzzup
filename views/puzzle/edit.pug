extends ../layout

include ../mixins/hidden
include ../mixins/puzzle/board
include ../mixins/puzzle/clues
include ../mixins/puzzle/tags
include ../mixins/puzzle/credits

block content
  link(href='/css/puzzle.css', rel='stylesheet')
  script(src="/scripts/puzzle.js")

  h1  Edit Puzzle
  p
    | Edit the puzzle's title, description, board, and clues.

  h3(contenteditable, title='click to edit')#puzzle-title.puzzle-title= puzzle.name ||  "Puzzle"
  div(contenteditable, title='click to edit')#puzzle-description.puzzle-description= puzzle.description || "Description."

  +board('edit')

  +clues('editclues')

  +tags('edittags', puzzle.tags, ! puzzle.published)

  if ! puzzle.published
    section.puzzle-buttons
      div.puzzle-left-buttons
        div#publishpuzzle.standard-button Publish
        div#deletepuzzle.standard-button Delete
      div#savepuzzle.standard-button Save
  else
    +credits(puzzle)

  +hidden('puzzle-content', puzzle)

  script.
    $(function() {
      const $grid = $("table#edit");

      const $acrossList = $("section#editclues ul#across");
      const $downList = $("section#editclues ul#down");

      const $publishbutton = $("#publishpuzzle");
      const $deletebutton = $("#deletepuzzle");
      const $savebutton = $("#savepuzzle");

      let clues = {};

      $("section.puzzle-clues").on("blur", "div.puzzle-list-clue", function() {
        const $this = $(this);
        const id = $this.closest("li").attr("data-pos");
        clues[id] = $this.text();
        $savebutton.removeClass("standard-button-disabled");
      })

      function makeAnchorId(prefix, anchor) {
        return `${prefix}-${anchor.pos.column}-${anchor.pos.row}`;
      }

      function makeClueItem(anchor, prefix, word) {
        const id = makeAnchorId(prefix, anchor);
        const clue = word.clue || clues[id];
        if (clue) {
          clues[id] = clue;
        }

        const $item = $("<li>", {class: "puzzle-list-item"})
                      .attr("data-number", anchor.number)
                      .attr("data-column", anchor.pos.column)
                      .attr("data-row", anchor.pos.row)
                      .attr("data-pos", id)
                      .append($("<span>", {class: "puzzle-list-anchor"}).text(anchor.number))
                      .append($("<span>", {class: "puzzle-list-word"}).text(` [${word.text || ""}]`))
                      .append($("<span>", {class: "puzzle-list-size"}).text(` (${word.length})`))
                      .append($("<div>", {class: "puzzle-list-clue", title: "click to edit", contenteditable: true}).text(clue || `clue for '${word.text}'`));

        return $item;
      }

      function change(event) {
        $acrossList.empty();
        $downList.empty();

        $.each(event.anchors, function() {
            if (this.horizontal) {
              $acrossList.append(makeClueItem(this, "a", this.horizontal));
            }
            if (this.vertical) {
              $downList.append(makeClueItem(this, "d", this.vertical));
            }
        });

        $savebutton.removeClass("standard-button-disabled");
      }

      function anchorload(anchor) {
        if (anchor.horizontal) {
          $acrossList.append(makeClueItem(anchor, "a", anchor.horizontal));
        }
        if (anchor.vertical) {
          $downList.append(makeClueItem(anchor, "d", anchor.vertical));
        }
      }

      const puzzle = $.getHidden("puzzle-content") || {};
      const puzzleInfo = {
        hash: puzzle.hash,
        mode: puzzle.mode || "cross"
      };

      function loaded() {
        $savebutton.addClass("standard-button-disabled");
        if (puzzle.published) {
          $publishbutton.hide();
          $deletebutton.hide();
        }
      }

      const settings = {
        editing: true,
        events: {
          load: loaded,
          anchorload: anchorload,
          cell: change,
          letter: change
        }
      };

      function save(config = {}) {
        let data = $grid.puzzle().contents(anchor => {
          if (anchor.horizontal) {
            const id = makeAnchorId("a", anchor);
            anchor.horizontal.clue = clues[id];
          }
          if (anchor.vertical) {
            const id = makeAnchorId("d", anchor);
            anchor.vertical.clue = clues[id];
          }
        });

        data = $.extend(data, puzzleInfo, {
          name: $("#puzzle-title").text(),
          description: $("#puzzle-description").text(),
          tags: $("#edittags").val().trim().split(/\s* \s*/)
        }, config);

        console.log("save: data(%o)", data);

        $.ajax(
          {
            url: "/puzzle",
            method: puzzleInfo.hash ? "PUT" : "POST",
            data: data
          }
        ).
        then(function(response) {
          console.info("$.ajax: success(%o)", response);
          puzzleInfo.hash = response.hash;
          puzzleInfo.mode = response.mode;

          if (config.published) {
            $.redirect("/");
          }
          else {
            $savebutton.addClass("standard-button-disabled");
          }
        })
        .catch(function(error) {
          console.error("$.ajax: error(%o)", error.responseJSON);
        });
      }

      $publishbutton.click(function() {
        const title =  `Publish '${$("#puzzle-title").text()}'?`;
        const message = "This action cannot be reversed. Once published, the puzzle will be visible on the front page, will be playable by others, and the puzzle will no longer be editable. Do you want to publish this puzzle?";
        $.message.tick(title, message, ["Yes", "No"])
          .then(button => {
            if (button === "yes") {
              save({published: true});
            }
          });
      });

      $deletebutton.click(function() {
        const title =  `Delete '${$("#puzzle-title").text()}'?`;
        const message = "This action cannot be reversed, and the puzzle will no longer be available. Do you want to delete this puzzle?";
        $.message.ask(title, message, ["Yes", "No"])
          .then(button => {
            console.log("/puzzle/edit.html - delete(%s)", button);
          });
      });

      $savebutton.click(function() {
        if (! $savebutton.hasClass("standard-button-disabled")) {
          save();
        }
      });

      if (puzzle.hash) {
        $grid.puzzle(puzzle,  settings)
          .end()
          .fadeIn();
      }
      else {
        function makeDialogControl(name, $control) {
          return $("<div>", {class: "puzzle-new-control"})
                  .append($("<label>", {class: "puzzle-new-label"}).text(name))
                  .append($control);
        }

        $("<div>", {class: "puzzle-new-dialog"})
          .append(makeDialogControl("Name", $("<input>", {id: "newname", type: "text", value: "New Puzzle", autofocus: true})))
          .append(makeDialogControl("Columns", $("<input>", {id: "newcolumns", type: "range", min: 8, max: 20, value: 13})))
          .append(makeDialogControl("Rows", $("<input>", {id: "newrows", type: "range", min: 8, max: 20, value: 13})))
          .append(makeDialogControl("", $("<label>", {id: "newinfo", class: "puzzle-new-info"}).text("(13 columns x 13 rows))")))
          .on("change", "input[type=range]", function() {
            const columncount = $("input[type=range]#newcolumns").val();
            const rowcount = $("input[type=range]#newrows").val();
            $("label.puzzle-new-info").text(`(${columncount} columns x ${rowcount} rows)`);
          })
          .dialog({
            title: "New Puzzle",
            width: 440
          })
          .then(function(button) {
            const puzzlename = $("input[type=text]#newname").val();
            const columncount = Number.parseInt($("input[type=range]#newcolumns").val());
            const rowcount = Number.parseInt($("input[type=range]#newrows").val());

            $("#puzzle-title").text(puzzlename);
            $grid.puzzle({
              size: {
                columns: columncount,
                rows: rowcount
              }
            },  settings)
              .end()
              .fadeIn();
          })
      }
    });